<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jax.show</title>
  
  <subtitle>Coding changes the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jax.show/"/>
  <updated>2018-11-23T06:23:58.356Z</updated>
  <id>https://jax.show/</id>
  
  <author>
    <name>Jax</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="https://jax.show/2018/11/23/hello-world/"/>
    <id>https://jax.show/2018/11/23/hello-world/</id>
    <published>2018-11-23T06:23:58.356Z</published>
    <updated>2018-11-23T06:23:58.356Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;http://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;http://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;http://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pandas快速数据可视化</title>
    <link href="https://jax.show/2017/05/22/pandas%E5%BF%AB%E9%80%9F%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>https://jax.show/2017/05/22/pandas快速数据可视化/</id>
    <published>2017-05-21T18:22:02.000Z</published>
    <updated>2018-11-23T07:21:57.290Z</updated>
    
    <content type="html"><![CDATA[<p>Pandas 是 python 中最常用的数据统计包，而数据可视化一般是使用 matplotlib 或者 seaborn。</p><p>其实 Pandas 已经内置了 matplotlib / pylab 用于数据可视化的方法，在分析一维和二维数据时非常方便。</p><p>“pandas.DataFrame.plot Make plots of DataFrame using matplotlib / pylab.”</p><a id="more"></a><h2 id="如何调用"><a href="#如何调用" class="headerlink" title="如何调用"></a>如何调用</h2><p><strong>DataFrame.boxplot</strong></p><p><strong>DataFrame.hist</strong></p><p><strong>DataFrame.plot</strong></p><p>其中 DataFrame.plot 既是可调用的方法也是一个命名空间。</p><p>既可以使用 DataFrame.plot(kind=kind) 也可以使用 DataFrame.plot.kind 来调用。</p><p>例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot(kind=&apos;line&apos;)</span><br></pre></td></tr></table></figure></p><p>等价于 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.plot.line()</span><br></pre></td></tr></table></figure><h3 id="DataFrame-plot-图表类型"><a href="#DataFrame-plot-图表类型" class="headerlink" title="DataFrame.plot 图表类型"></a>DataFrame.plot 图表类型</h3><p>‘line’ : 折线图 (default)</p><p>‘bar’ : 条形图</p><p>‘barh’ : 垂直条形图</p><p>‘hist’ : 直方图</p><p>‘box’ : 箱线图</p><p>‘kde’ : 核密度估计</p><p>‘density’ : same as ‘kde’</p><p>‘area’ : 面积图</p><p>‘pie’ : 饼状图</p><p>‘scatter’ : 散点图</p><p>‘hexbin’ : 六边形图</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>引入需要使用的包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><p>构建一个用于演示的简单数据集 students：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">students = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">'Name'</span>: [<span class="string">'Hou Yi'</span>, <span class="string">'Jiang Ziya'</span>, <span class="string">'Tai Yi'</span>, <span class="string">'Zhao Yun'</span>, <span class="string">'Liu Bei'</span>],</span><br><span class="line">    <span class="string">'Id'</span>: range(<span class="number">5</span>),</span><br><span class="line">    <span class="string">'Math'</span>: np.random.randint(<span class="number">55</span>, <span class="number">100</span>, size=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'Physics'</span>: np.random.randint(<span class="number">55</span>, <span class="number">100</span>, size=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'Biology'</span>: np.random.randint(<span class="number">55</span>, <span class="number">100</span>, size=<span class="number">5</span>),</span><br><span class="line">    <span class="string">'Group'</span>: [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>],</span><br><span class="line">    <span class="string">'Age'</span>: np.random.randint(<span class="number">18</span>, <span class="number">20</span>, size=<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>Age</th>      <th>Biology</th>      <th>Group</th>      <th>Id</th>      <th>Math</th>      <th>Name</th>      <th>Physics</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>18</td>      <td>71</td>      <td>A</td>      <td>0</td>      <td>90</td>      <td>Hou Yi</td>      <td>74</td>    </tr>    <tr>      <th>1</th>      <td>19</td>      <td>75</td>      <td>B</td>      <td>1</td>      <td>76</td>      <td>Jiang Ziya</td>      <td>97</td>    </tr>    <tr>      <th>2</th>      <td>19</td>      <td>89</td>      <td>A</td>      <td>2</td>      <td>60</td>      <td>Tai Yi</td>      <td>91</td>    </tr>    <tr>      <th>3</th>      <td>18</td>      <td>94</td>      <td>A</td>      <td>3</td>      <td>62</td>      <td>Zhao Yun</td>      <td>75</td>    </tr>    <tr>      <th>4</th>      <td>18</td>      <td>67</td>      <td>B</td>      <td>4</td>      <td>59</td>      <td>Liu Bei</td>      <td>58</td>    </tr>  </tbody></table><p><strong>字段说明：</strong></p><p>Id：编号</p><p>Age: 年龄</p><p>Name：姓名</p><p>Group：分组</p><p>Math：数学成绩</p><p>Biology：生物成绩</p><p>Physics：物理成绩</p><p>对于成绩这样的变量，箱线图是非常合适的可视化方案</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[<span class="string">'Math'</span>].plot.box()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1201a2c50&gt;</code></pre><p><img src="output_12_1.png" alt="png"></p><p>可以一次性把所科目的成绩都可视化出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[[<span class="string">'Math'</span>, <span class="string">'Biology'</span>, <span class="string">'Physics'</span>]].plot.box()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11e5d6690&gt;</code></pre><p><img src="output_14_1.png" alt="png"></p><p>也可以通过平均值对比下各科成绩的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[[<span class="string">'Math'</span>, <span class="string">'Biology'</span>, <span class="string">'Physics'</span>]].mean().plot.line()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11d774fd0&gt;</code></pre><p><img src="output_16_1.png" alt="png"></p><p>可以直接通过 by 参数查看 groupby 分组信息后的成绩分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[[<span class="string">'Math'</span>, <span class="string">'Biology'</span>, <span class="string">'Physics'</span>, <span class="string">'Group'</span>]].boxplot(by=<span class="string">'Group'</span>, figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1203b6f50&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1207edb10&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x120875990&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x1208e72d0&gt;]], dtype=object)</code></pre><p><img src="output_18_1.png" alt="png"></p><p>或者是 groupby 年龄的成绩分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[[<span class="string">'Math'</span>, <span class="string">'Biology'</span>, <span class="string">'Physics'</span>, <span class="string">'Age'</span>]].boxplot(by=<span class="string">'Age'</span>, figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1203b6fd0&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x120cba5d0&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x120d40450&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x120da5d50&gt;]], dtype=object)</code></pre><p><img src="output_20_1.png" alt="png"></p><p>如果想按两个条件来查看分布，可以给 by 参数传递一个数组(实例数据较少，可能不会展示出全部纬度的图)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students[[<span class="string">'Math'</span>, <span class="string">'Biology'</span>, <span class="string">'Physics'</span>, <span class="string">'Age'</span>, <span class="string">'Group'</span>]].boxplot(by=[<span class="string">'Age'</span>, <span class="string">'Group'</span>], figsize=(<span class="number">12</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>array([[&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1217750d0&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x123681d50&gt;],       [&lt;matplotlib.axes._subplots.AxesSubplot object at 0x1238b7bd0&gt;,        &lt;matplotlib.axes._subplots.AxesSubplot object at 0x123929510&gt;]], dtype=object)</code></pre><p><img src="output_22_1.png" alt="png"></p><p>也可以通过数据的处理来查看样本中的数量分布，比如按分组查看样本数量分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.groupby(<span class="string">'Group'</span>)[<span class="string">'Id'</span>].count().plot.pie(figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x120b0ee10&gt;</code></pre><p><img src="output_24_1.png" alt="png"></p><p>或者同时按分组和年龄查看样本数量分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.groupby([<span class="string">'Group'</span>, <span class="string">'Age'</span>])[<span class="string">'Id'</span>].count().plot.pie(figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11ec2ca90&gt;</code></pre><p><img src="output_26_1.png" alt="png"></p><p>其它类型的图表使用方法基本也都类似，选择自己需要的表现形式即可。</p><p>如果对于可视化的需求比较简单，直接使用 pandas 比使用 matplotlib 要简洁畅快不少。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Pandas 是 python 中最常用的数据统计包，而数据可视化一般是使用 matplotlib 或者 seaborn。&lt;/p&gt;
&lt;p&gt;其实 Pandas 已经内置了 matplotlib / pylab 用于数据可视化的方法，在分析一维和二维数据时非常方便。&lt;/p&gt;
&lt;p&gt;“pandas.DataFrame.plot Make plots of DataFrame using matplotlib / pylab.”&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://jax.show/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="pandas" scheme="https://jax.show/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>泰坦尼克号幸存概率分析</title>
    <link href="https://jax.show/2017/05/18/%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E5%B9%B8%E5%AD%98%E6%A6%82%E7%8E%87%E5%88%86%E6%9E%90/"/>
    <id>https://jax.show/2017/05/18/泰坦尼克号幸存概率分析/</id>
    <published>2017-05-18T08:14:48.000Z</published>
    <updated>2018-11-23T07:22:17.681Z</updated>
    
    <content type="html"><![CDATA[<p>经典的数据集，包括泰坦尼克号上 2224 名乘客和船员中 891 名的人口学数据和乘客基本信息，来自kaggle。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic = pd.read_csv(<span class="string">'titanic-data.csv'</span>)</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>探索titanic数据的问题</li><li>找到生还率最高的人群</li></ol><h2 id="数据探索"><a href="#数据探索" class="headerlink" title="数据探索"></a>数据探索</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.head()</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Name</th>      <th>Sex</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Ticket</th>      <th>Fare</th>      <th>Cabin</th>      <th>Embarked</th>    </tr>  </thead>  <tbody>    <tr>      <th>0</th>      <td>1</td>      <td>0</td>      <td>3</td>      <td>Braund, Mr. Owen Harris</td>      <td>male</td>      <td>22.0</td>      <td>1</td>      <td>0</td>      <td>A/5 21171</td>      <td>7.2500</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>1</th>      <td>2</td>      <td>1</td>      <td>1</td>      <td>Cumings, Mrs. John Bradley (Florence Briggs Th…</td>      <td>female</td>      <td>38.0</td>      <td>1</td>      <td>0</td>      <td>PC 17599</td>      <td>71.2833</td>      <td>C85</td>      <td>C</td>    </tr>    <tr>      <th>2</th>      <td>3</td>      <td>1</td>      <td>3</td>      <td>Heikkinen, Miss. Laina</td>      <td>female</td>      <td>26.0</td>      <td>0</td>      <td>0</td>      <td>STON/O2. 3101282</td>      <td>7.9250</td>      <td>NaN</td>      <td>S</td>    </tr>    <tr>      <th>3</th>      <td>4</td>      <td>1</td>      <td>1</td>      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>      <td>female</td>      <td>35.0</td>      <td>1</td>      <td>0</td>      <td>113803</td>      <td>53.1000</td>      <td>C123</td>      <td>S</td>    </tr>    <tr>      <th>4</th>      <td>5</td>      <td>0</td>      <td>3</td>      <td>Allen, Mr. William Henry</td>      <td>male</td>      <td>35.0</td>      <td>0</td>      <td>0</td>      <td>373450</td>      <td>8.0500</td>      <td>NaN</td>      <td>S</td>    </tr>  </tbody></table><h3 id="数据字段说明"><a href="#数据字段说明" class="headerlink" title="数据字段说明"></a>数据字段说明</h3><p>PassengerId：乘客编号，Survived：乘客是否存活，Pclass：乘客所在的船舱等级；Name：乘客姓名，Sex：乘客性别，Age：乘客年龄，SibSp：乘客的兄弟姐妹和配偶数量，Parch：乘客的父母与子女数量，Ticket：票的编号，Fare：票价，Cabin：座位号，Embarked：乘客登船码头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.info()</span><br></pre></td></tr></table></figure><pre><code>&lt;class &apos;pandas.core.frame.DataFrame&apos;&gt;RangeIndex: 891 entries, 0 to 890Data columns (total 12 columns):PassengerId    891 non-null int64Survived       891 non-null int64Pclass         891 non-null int64Name           891 non-null objectSex            891 non-null objectAge            714 non-null float64SibSp          891 non-null int64Parch          891 non-null int64Ticket         891 non-null objectFare           891 non-null float64Cabin          204 non-null objectEmbarked       889 non-null objectdtypes: float64(2), int64(5), object(5)memory usage: 83.6+ KB</code></pre><h3 id="数据异常观察"><a href="#数据异常观察" class="headerlink" title="数据异常观察"></a>数据异常观察</h3><p>座位号数据较少只有204条，猜测可能因为低等仓不分座位吧。</p><p>年龄数据有714条，缺了177条，对于买船票的人来说登记年龄不是必须的，所以这个量属于正常。</p><p>登船码头数据缺了两条，可能是返程的船员或者偷偷溜上船。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">embarked_group = titanic.groupby(<span class="string">'Embarked'</span>)</span><br><span class="line"><span class="keyword">print</span> embarked_group[<span class="string">'Cabin'</span>].count()</span><br><span class="line"><span class="keyword">print</span> embarked_group[<span class="string">'PassengerId'</span>].count()</span><br></pre></td></tr></table></figure><pre><code>EmbarkedC     69Q      4S    129Name: Cabin, dtype: int64EmbarkedC    168Q     77S    644Name: PassengerId, dtype: int64</code></pre><p>验证猜测：座位号数据较少只有204条，猜测可能因为低等仓不分座位吧。</p><p><strong>根据数据来看每个仓位都有座位号缺失的情况，看起来应该是座位登记表跟着titanic遗失了，并不是因为低等仓不分配座位。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.isnull().groupby(<span class="string">'Embarked'</span>).groups[<span class="keyword">True</span>]</span><br></pre></td></tr></table></figure><pre><code>Int64Index([61, 829], dtype=&apos;int64&apos;)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> titanic.iloc[<span class="number">61</span>]</span><br><span class="line"><span class="keyword">print</span> titanic.iloc[<span class="number">829</span>]</span><br><span class="line"><span class="keyword">print</span> titanic.iloc[<span class="number">61</span>] == titanic.iloc[<span class="number">829</span>]</span><br></pre></td></tr></table></figure><pre><code>PassengerId                     62Survived                         1Pclass                           1Name           Icard, Miss. AmelieSex                         femaleAge                             38SibSp                            0Parch                            0Ticket                      113572Fare                            80Cabin                          B28Embarked                       NaNName: 61, dtype: objectPassengerId                                          830Survived                                               1Pclass                                                 1Name           Stone, Mrs. George Nelson (Martha Evelyn)Sex                                               femaleAge                                                   62SibSp                                                  0Parch                                                  0Ticket                                            113572Fare                                                  80Cabin                                                B28Embarked                                             NaNName: 829, dtype: objectPassengerId    FalseSurvived        TruePclass          TrueName           FalseSex             TrueAge            FalseSibSp           TrueParch           TrueTicket          TrueFare            TrueCabin           TrueEmbarked       Falsedtype: bool</code></pre><p>验证猜测：登船码头数据缺了两条，可能是返程的船员或者偷偷溜上船。</p><p><strong>首先找到两条登船码头缺失的记录</strong></p><p><strong>接着看了下两条记录的不同之处，接着发现了一些共同点，比如船票是同一张，都是女性且都获救等等，船票是同一张有些可疑；</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ticket_count = titanic.groupby(<span class="string">'Ticket'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">ticket_count.name = <span class="string">'count of passengers under same ticket'</span></span><br><span class="line">sns.distplot(ticket_count)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11988ad10&gt;</code></pre><p><img src="output_14_1.png" alt="png"></p><p>根据使用同张船票的乘客分布来看，大部分乘客都是一张票但是共用船票的情况也很常见，所以确实存在套票等</p><h2 id="单变量探索"><a href="#单变量探索" class="headerlink" title="单变量探索"></a>单变量探索</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.describe()</span><br></pre></td></tr></table></figure><table border="1" class="dataframe">  <thead>    <tr style="text-align: right;">      <th></th>      <th>PassengerId</th>      <th>Survived</th>      <th>Pclass</th>      <th>Age</th>      <th>SibSp</th>      <th>Parch</th>      <th>Fare</th>    </tr>  </thead>  <tbody>    <tr>      <th>count</th>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>714.000000</td>      <td>891.000000</td>      <td>891.000000</td>      <td>891.000000</td>    </tr>    <tr>      <th>mean</th>      <td>446.000000</td>      <td>0.383838</td>      <td>2.308642</td>      <td>29.699118</td>      <td>0.523008</td>      <td>0.381594</td>      <td>32.204208</td>    </tr>    <tr>      <th>std</th>      <td>257.353842</td>      <td>0.486592</td>      <td>0.836071</td>      <td>14.526497</td>      <td>1.102743</td>      <td>0.806057</td>      <td>49.693429</td>    </tr>    <tr>      <th>min</th>      <td>1.000000</td>      <td>0.000000</td>      <td>1.000000</td>      <td>0.420000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>0.000000</td>    </tr>    <tr>      <th>25%</th>      <td>223.500000</td>      <td>0.000000</td>      <td>2.000000</td>      <td>20.125000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>7.910400</td>    </tr>    <tr>      <th>50%</th>      <td>446.000000</td>      <td>0.000000</td>      <td>3.000000</td>      <td>28.000000</td>      <td>0.000000</td>      <td>0.000000</td>      <td>14.454200</td>    </tr>    <tr>      <th>75%</th>      <td>668.500000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>38.000000</td>      <td>1.000000</td>      <td>0.000000</td>      <td>31.000000</td>    </tr>    <tr>      <th>max</th>      <td>891.000000</td>      <td>1.000000</td>      <td>3.000000</td>      <td>80.000000</td>      <td>8.000000</td>      <td>6.000000</td>      <td>512.329200</td>    </tr>  </tbody></table><h3 id="年龄分布："><a href="#年龄分布：" class="headerlink" title="年龄分布："></a>年龄分布：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'Age'</span>].hist()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x10f72f350&gt;</code></pre><p><img src="output_19_1.png" alt="png"></p><p>PS:Age属性缺失的数据已经被自动过滤</p><p>年龄是个连续变量，但是按照人们的习惯在生活中对不同年龄段的人会区别对待。</p><p>所以通过计算把年龄段转换为分类变量:把18岁以下的作为『儿童』，18~50岁之间的作为『中年』，50岁以上的作为『老年』。</p><p>下面也会把根据年龄的分组作为分析的一个主要变量。</p><p>Age属性缺失的数据不转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAgeGroup</span><span class="params">(age)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> age &lt; <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'child'</span></span><br><span class="line">    <span class="keyword">elif</span> age &lt; <span class="number">50</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'middle'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'old'</span></span><br><span class="line"></span><br><span class="line">titanic[<span class="string">'AgeGroup'</span>] = titanic[<span class="string">'Age'</span>].dropna().apply(getAgeGroup)</span><br><span class="line"></span><br><span class="line">ageGroup = titanic.groupby(<span class="string">'AgeGroup'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line"></span><br><span class="line">ageGroup.name = <span class="string">'Age Group'</span></span><br><span class="line"></span><br><span class="line">ageGroup.plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x10f937ad0&gt;</code></pre><p><img src="output_22_1.png" alt="png"></p><p>根据年龄分组后的饼图，可以看出儿童占有年龄统计乘客数的15.83%，还有10.36%是老人，剩下73.81%是中年人</p><h3 id="性别分布"><a href="#性别分布" class="headerlink" title="性别分布"></a>性别分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sex_group = titanic.groupby(<span class="string">'Sex'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">sex_group.name = <span class="string">'Sex'</span></span><br><span class="line">sex_group.plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1114facd0&gt;</code></pre><p><img src="output_25_1.png" alt="png"></p><p>从性别分布来看男性占了64.76%，女性占了35.24</p><h3 id="船票价格分布"><a href="#船票价格分布" class="headerlink" title="船票价格分布"></a>船票价格分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'Fare'</span>].hist()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x113816bd0&gt;</code></pre><p><img src="output_28_1.png" alt="png"></p><p>从船票价格分布来看，绝大多数乘客(约750位)的船票在0~50美元区间，100位乘客的船票在50~100美元，最高的票价达到500美元</p><h3 id="乘客的兄弟姐妹和配偶数量分布"><a href="#乘客的兄弟姐妹和配偶数量分布" class="headerlink" title="乘客的兄弟姐妹和配偶数量分布"></a>乘客的兄弟姐妹和配偶数量分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'SibSp'</span>].hist()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x113a33750&gt;</code></pre><p><img src="output_31_1.png" alt="png"></p><p>大多数乘客(600个左右)都没有兄弟姐妹或配偶，有200个乘客有一个兄弟姐妹或配偶，零星乘客有2个及以上兄弟姐妹及配偶</p><h3 id="乘客的父母与子女数量"><a href="#乘客的父母与子女数量" class="headerlink" title="乘客的父母与子女数量"></a>乘客的父母与子女数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'Parch'</span>].hist()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x113b88710&gt;</code></pre><p><img src="output_34_1.png" alt="png"></p><p>大多数乘客都没有和父母或子女同行，约有100个乘客与一个父母或子女同行，约有90个乘客与两个父母或子女同行</p><h3 id="舱位分布"><a href="#舱位分布" class="headerlink" title="舱位分布"></a>舱位分布</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pclass_group = titanic.groupby(<span class="string">'Pclass'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">pclass_group.name =<span class="string">'Pclass'</span></span><br><span class="line">pclass_group.plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x115f2af90&gt;</code></pre><p><img src="output_37_1.png" alt="png"></p><p>从比例分布看三等舱占55%，二等舱最少占21%左右，一等舱约占24%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pclass_group.plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1144c9a90&gt;</code></pre><p><img src="output_39_1.png" alt="png"></p><p>从数量分布来看三等舱有500个左右，一等舱、二等舱均在200上下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">embarked_group = titanic.groupby(<span class="string">'Embarked'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">embarked_group.name =<span class="string">'Embarked'</span></span><br><span class="line">embarked_group.plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2fc%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x114443050&gt;</code></pre><p><img src="output_41_1.png" alt="png"></p><p>登船码头的比例分布：</p><p>72.44%的乘客都从『S』码头登船，18.9%的乘客从『C』码头登船，8.66%的乘客从『Q』码头登船</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">embarked_group.plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1146f9990&gt;</code></pre><p><img src="output_43_1.png" alt="png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">survived_group = titanic.groupby(<span class="string">'Survived'</span>)[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">survived_group.name =<span class="string">'Servived'</span></span><br><span class="line">survived_group.plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x119d00810&gt;</code></pre><p><img src="output_44_1.png" alt="png"></p><p>样本中幸存者的比例在38.38%，遇难者占了61.62%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">survived_group.plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x114ba74d0&gt;</code></pre><p><img src="output_46_1.png" alt="png"></p><p>样本中有550位左右遇难者和340位左右的幸存者</p><h2 id="幸存与各变量的相关度分析"><a href="#幸存与各变量的相关度分析" class="headerlink" title="幸存与各变量的相关度分析"></a>幸存与各变量的相关度分析</h2><p>首先看下各变量和是否幸存之间的相关度。</p><p>为了计算方便把 Sex 和 AgeGroup 都转换为数字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">titanic[<span class="string">'SexBool'</span>] = titanic[<span class="string">'Sex'</span>] == <span class="string">'male'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numberic_age</span><span class="params">(age_group)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> age_group == <span class="string">'child'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> age_group == <span class="string">'middle'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> age_group == <span class="string">'old'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">titanic[<span class="string">'AgeGroupNumber'</span>] = titanic[<span class="string">'AgeGroup'</span>].apply(numberic_age)</span><br><span class="line"></span><br><span class="line">pearsonr = titanic.corr()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> pearsonr[[<span class="string">'Survived'</span>, <span class="string">'Pclass'</span>, <span class="string">'Age'</span>, <span class="string">'SibSp'</span>, <span class="string">'Parch'</span>, <span class="string">'SexBool'</span>, <span class="string">'AgeGroupNumber'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> pearsonr[<span class="string">'Survived'</span>].sort_values()</span><br></pre></td></tr></table></figure><pre><code>                Survived    Pclass       Age     SibSp     Parch   SexBool  \PassengerId    -0.005007 -0.035144  0.036847 -0.057527 -0.001652  0.042939   Survived        1.000000 -0.338481 -0.077221 -0.035322  0.081629 -0.543351   Pclass         -0.338481  1.000000 -0.369226  0.083081  0.018443  0.131900   Age            -0.077221 -0.369226  1.000000 -0.308247 -0.189119  0.093254   SibSp          -0.035322  0.083081 -0.308247  1.000000  0.414838 -0.114631   Parch           0.081629  0.018443 -0.189119  0.414838  1.000000 -0.245489   Fare            0.257307 -0.549500  0.096067  0.159651  0.216225 -0.182333   SexBool        -0.543351  0.131900  0.093254 -0.114631 -0.245489  1.000000   AgeGroupNumber -0.101775 -0.294968  0.833260 -0.370322 -0.262033  0.107128                   AgeGroupNumber  PassengerId           0.020980  Survived             -0.101775  Pclass               -0.294968  Age                   0.833260  SibSp                -0.370322  Parch                -0.262033  Fare                  0.065379  SexBool               0.107128  AgeGroupNumber        1.000000  SexBool          -0.543351Pclass           -0.338481AgeGroupNumber   -0.101775Age              -0.077221SibSp            -0.035322PassengerId      -0.005007Parch             0.081629Fare              0.257307Survived          1.000000Name: Survived, dtype: float64</code></pre><p>可以看出来和是否幸存相关度最高的分别是 SexBool、Pclass、AgeGroupNumber。</p><p>用这三个属性分别和Survived结合进行观察。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby([<span class="string">'Survived'</span>, <span class="string">'Sex'</span>])[<span class="string">'PassengerId'</span>].count().plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11127ce50&gt;</code></pre><p><img src="output_52_1.png" alt="png"></p><p>结合是否幸存和性别来看，占样本数26%的女性幸存，只有占样本数12%的男性幸存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby(<span class="string">'Sex'</span>)[<span class="string">'Survived'</span>].mean().plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x113a3bdd0&gt;</code></pre><p><img src="output_54_1.png" alt="png"></p><p>根据性别和幸存率来看，女性的幸存比率达到75%左右，而男性在20%左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby([<span class="string">'Survived'</span>, <span class="string">'Pclass'</span>])[<span class="string">'PassengerId'</span>].count().plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1141b91d0&gt;</code></pre><p><img src="output_56_1.png" alt="png"></p><p>从比例分布看一等舱的幸存者比例占样本乘客数的15.26%，二等舱占9.76，三等舱占13.36而遇难者比例三等舱占了41.75，二等舱占10.89，一等舱占8.98%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby(<span class="string">'Pclass'</span>)[<span class="string">'Survived'</span>].mean().plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1143cdf10&gt;</code></pre><p><img src="output_58_1.png" alt="png"></p><p>综合船舱等级和幸存率来看：一等舱的幸存率最高达到65%，二等舱幸存率接近50%，三等舱幸存率只有25%左右</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby([<span class="string">'Survived'</span>, <span class="string">'AgeGroup'</span>])[<span class="string">'PassengerId'</span>].count().plot.pie(figsize=(<span class="number">6</span>, <span class="number">6</span>), autopct=<span class="string">'%.2f%%'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11456c610&gt;</code></pre><p><img src="output_60_1.png" alt="png"></p><p>结合年龄段来看，幸存者占样本比例最高的是中年人占28.29，儿童占8.54，老人占3.78</p><p>而遇难者占样本比例最高的也是中年人占45.52%，儿童占7.28，老人占6.58%</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">titanic.groupby(<span class="string">'AgeGroup'</span>)[<span class="string">'Survived'</span>].mean().plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x114595a10&gt;</code></pre><p><img src="output_62_1.png" alt="png"></p><p>结合年龄段和幸存率看儿童的幸存率最高55%左右，成年人的幸存率比较接近都在35%~40%之间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final_count = titanic.groupby([<span class="string">'Sex'</span>, <span class="string">'AgeGroup'</span>, <span class="string">'Pclass'</span>])[<span class="string">'PassengerId'</span>].count()</span><br><span class="line">final_count.sort_values(ascending=<span class="keyword">False</span>).plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11a68fc90&gt;</code></pre><p><img src="output_64_1.png" alt="png"></p><p>综合性别、年龄段、船舱等级纬度后样本数量分布如图（已过滤无年龄数据的样本）</p><p>人数最多的是三等舱的男性中年乘客有200位左右，而人数最少的是三等舱的女性老人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">final_survival_rate = titanic.groupby([<span class="string">'Sex'</span>, <span class="string">'AgeGroup'</span>, <span class="string">'Pclass'</span>])[<span class="string">'Survived'</span>].mean()</span><br><span class="line">final_survival_rate.sort_values(ascending=<span class="keyword">False</span>).plot.bar()</span><br></pre></td></tr></table></figure><pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x11a418650&gt;</code></pre><p><img src="output_66_1.png" alt="png"></p><p>综合性别、年龄段、船舱等级纬度后幸存率分布如图（已过滤无年龄数据的样本）</p><p>其中一等舱的男孩和二等舱的女孩幸存率都是100%，三等舱的女性老人幸存率也达到100%，由于样本过少参考意义有限</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.factorplot(x=<span class="string">'AgeGroup'</span>, y=<span class="string">'Survived'</span>, col=<span class="string">"Pclass"</span>, data=titanic, hue=<span class="string">'Sex'</span>)</span><br></pre></td></tr></table></figure><pre><code>&lt;seaborn.axisgrid.FacetGrid at 0x118e368d0&gt;</code></pre><p><img src="output_68_1.png" alt="png"></p><p>综合性别、年龄段、船舱等级纬度后幸存率分布如图（已过滤无年龄数据的样本）</p><p>通过该图可以明显看出性别对于幸存率的影响最为明显，随着船舱等级降低幸存率也在降低以及各年龄段在各等级船舱的幸存率分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">final_result = pd.DataFrame(&#123;<span class="string">'survival'</span>:final_survival_rate, <span class="string">'count'</span>:final_count&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> final_result.sort_values(<span class="string">'survival'</span>, ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><pre><code>                        count  survivalSex    AgeGroup Pclass                 male   child    1           4  1.000000female child    2          12  1.000000       old      3           1  1.000000       middle   1          62  0.983871       old      1          15  0.933333       middle   2          56  0.910714       child    1           8  0.875000       old      2           6  0.833333male   child    2          11  0.818182female child    3          35  0.542857male   middle   1          68  0.441176female middle   3          66  0.409091male   child    3          43  0.232558       old      1          29  0.206897       middle   3         200  0.140000       old      2          13  0.076923       middle   2          75  0.066667       old      3          10  0.000000</code></pre><p>综合性别、年龄段、船舱等级纬度后幸存率排序如该表格所示（已过滤无年龄数据的样本）</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>综合以上分析，对生存率影响较大的变量有性别、船舱等级和年龄段。</p><p>其中年龄段数据由于部分年龄数据丢失而被过滤，对整体结论有较小影响。</p><p>Titanic 上的男士都是不折不扣的绅士，他们把生存的机会让给了女士。只从性别看男性的幸存率只有20%左右，而女性幸存率高达75%。</p><p>生命不分贵贱，可是由于船舱位置的原因一等舱的幸存率达到65%，而二等舱有将近一半人幸存，幸存率为47%左右，逃生位置不好的三等舱只有25%左右的乘客幸存。</p><p>儿童相对于成年人来说在面对营救时也获得了优先，幸存率在55%左右，而中年和老年人的幸存率都不到40%。</p><p>从综合的纬度来看一等舱和二等舱的女性以及儿童都获得了比较高的幸存率在80%以上。</p><p>而三等舱除了样本量较少的一位女性老人获救而达到100%的幸存率以外，连女孩儿的幸存率也只是刚刚达到54%。</p><p>而幸存率最低的则是二三等舱的男性，不论年龄，都把获救的机会留给了别人，令人敬佩和惋惜。</p><p>该数据集样本并不是全部数据，从Titanic幸存者报告来看，真正的幸存乘客有492名，而数据集中的幸存乘客为340位；但是该数据集已经占了总体的70%所以我们的分析接近总体数据的分析。</p><p>在涉及到年龄变量的统计时过滤掉了没有年龄数据的乘客，占样本比例的20%左右，对分析结果有较小的影响。</p><p>还有一些比如获救船员数据，是否有宠物获救占据救生艇位置，乘客身体状况以及舱位与船舱出口距离等应该都对幸存率有影响。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p><a href="http://www.titanicfacts.net/titanic-survivors.html" target="_blank" rel="noopener">Titanicfacts</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经典的数据集，包括泰坦尼克号上 2224 名乘客和船员中 891 名的人口学数据和乘客基本信息，来自kaggle。&lt;/p&gt;
    
    </summary>
    
      <category term="数据分析" scheme="https://jax.show/categories/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
    
      <category term="数据分析案例" scheme="https://jax.show/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
</feed>
